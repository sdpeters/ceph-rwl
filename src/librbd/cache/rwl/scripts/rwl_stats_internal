#!/bin/bash
jq '{ 
test_time: (.test_time),
image: (.image),
rbd_vol: (.stats|keys[0]),
rd: (.stats[.stats|keys[0]].rd),
rd_bytes: (.stats[.stats|keys[0]].rd_bytes), 
rd_latency_ms: (.stats[.stats|keys[0]].rd_latency.avgtime * 1000), 
wr: (.stats[.stats|keys[0]].wr), 
wr_bytes: (.stats[.stats|keys[0]].wr_bytes), 
wr_latency_nw_ms: (.stats[.stats|keys[0]].wr_latency_nw.avgtime * 1000), 
wr_latency_ms: (.stats[.stats|keys[0]].wr_latency.avgtime * 1000), 
caller_wr_latency_ms: (.stats[.stats|keys[0]].caller_wr_latency.avgtime * 1000), 
wr_def: (.stats[.stats|keys[0]].wr_def), 
wr_def_lanes: (.stats[.stats|keys[0]].wr_def_lanes), 
wr_def_log: (.stats[.stats|keys[0]].wr_def_log), 
wr_def_buf: (.stats[.stats|keys[0]].wr_def_buf), 
wr_overlap: (.stats[.stats|keys[0]].wr_overlap), 
wr_q_barrier: (.stats[.stats|keys[0]].wr_q_barrier),
aio_flush: (.stats[.stats|keys[0]].aio_flush), 
aio_flush_lat_ms: (.stats[.stats|keys[0]].aio_flush_lat.avgtime * 1000), 
aio_flush_def: (.stats[.stats|keys[0]].aio_flush_def), 
log_ops: (.stats[.stats|keys[0]].log_ops), 
log_data_ops: (.stats[.stats|keys[0]].log_op_bytes.avgcount), 
log_data_op_bytes_avg: ((.stats[.stats|keys[0]].log_op_bytes.sum) / (.stats[.stats|keys[0]].log_op_bytes.avgcount)), 
log_ops_nodata: ((.stats[.stats|keys[0]].log_ops) - (.stats[.stats|keys[0]].log_op_bytes.avgcount)), 
cmp: (.stats[.stats|keys[0]].cmp), 
cmp_bytes: (.stats[.stats|keys[0]].cmp_bytes), 
cmp_fails: (.stats[.stats|keys[0]].cmp_fails), 
cmp_latency_ms: (.stats[.stats|keys[0]].cmp_lat.avgtime * 1000), 
m_lock_wait_us: (.stats[.stats|keys| .[] | select(endswith("m_lock"))].wait.avgtime * 1000000), 
m_log_append_lock_wait_us: (.stats[.stats|keys| .[] | select(endswith("m_log_append_lock"))].wait.avgtime * 1000000), 
m_blockguard_lock_wait_us: (.stats[.stats|keys| .[] | select(endswith("m_blockguard_lock"))].wait.avgtime * 1000000), 
m_deferred_dispatch_lock_wait_us: (.stats[.stats|keys| .[] | select(endswith("m_deferred_dispatch_lock"))].wait.avgtime * 1000000),
m_timer_lock_wait_us: (.stats[.stats|keys| .[] | select(endswith("m_timer_lock"))].wait.avgtime * 1000000),
req_arr_to_dis_t_us: (.stats[.stats|keys[0]].req_arr_to_dis_t.avgtime * 1000000), 
req_all_to_dis_t_us: (.stats[.stats|keys[0]].req_all_to_dis_t.avgtime * 1000000), 
op_dis_to_buf_t_us: (.stats[.stats|keys[0]].op_dis_to_buf_t.avgtime * 1000000), 
op_buf_to_bufc_t_us: (.stats[.stats|keys[0]].op_buf_to_bufc_t.avgtime * 1000000), 
op_app_to_appc_t_us: (.stats[.stats|keys[0]].op_app_to_appc_t.avgtime * 1000000),
op_dis_to_cmp_t_us: (.stats[.stats|keys[0]].op_dis_to_cmp_t.avgtime * 1000000), 
op_alloc_t_us: (.stats[.stats|keys[0]].op_alloc_t.avgtime * 1000000), 
append_tx_lat_us: (.stats[.stats|keys[0]].append_tx_lat.avgtime * 1000000), 
retire_tx_lat_us: (.stats[.stats|keys[0]].retire_tx_lat.avgtime * 1000000), 
flush_stats: (.stats[.stats|keys| .[] | select(startswith("librbd-"))] | {rd: .rd, rd_bytes: .rd_bytes, rd_latency_ms: (.rd_latency.avgtime * 1000), wr: .wr, wr_bytes: .wr_bytes, wr_latency_ms: (.wr_latency.avgtime * 1000)})
}'
